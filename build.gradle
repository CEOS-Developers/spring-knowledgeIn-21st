plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

//	testRuntimeOnly 'com.h2database:h2'
	testImplementation 'com.h2database:h2'

	// JWT 라이브러리 (jjwt)
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// 비밀번호 암호화 (BCrypt)
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

}

// 1 .env
- local환경에서 주입하는 건 ok
- docker, 배포환경에서 주입하는 건 찾아봐야함(지금은 .env가 아니라 파라미터로 주는 중)
// Groovy DSL 예시
// profile 관리
def activeProfile = project.findProperty("springProfile") ?: "local"

// test
/*
tasks.withType(Test).configureEach {
	useJUnitPlatform()
	systemProperty("spring.profiles.active", "test")
}

// 실행
tasks.named("bootRun") {
	systemProperty("spring.profiles.active", activeProfile)
}
*/

/*
// .env 주입
def envProps = new Properties()
file('.env').withReader('UTF-8') { envProps.load(it) }

tasks.withType(JavaExec).configureEach {
	environment.putAll(envProps)
}
test {
	environment.putAll(envProps)
}
*/
